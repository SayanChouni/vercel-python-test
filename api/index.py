import os
import json
import asyncio
import psycopg2
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# --- Vercel-‡¶è‡¶∞ Environment Variable ‡¶•‡ßá‡¶ï‡ßá ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶ì ‡¶°‡ßá‡¶ü‡¶æ‡¶¨‡ßá‡¶∏ URL ‡¶®‡¶ø‡¶® ---
BOT_TOKEN = os.getenv('8202067450:AAGZ-0OHMOmVlk-fjyiETLPHkTzbponbfic')
DATABASE_URL = os.getenv('postgresql://neondb_owner:npg_mMBQ3c7qjOFg@ep-noisy-frog-adt8ya3o-pooler.c-2.us-east-1.aws.neon.tech/neondb?sslmode=requireL')

# --- ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡¶ó‡ßÅ‡¶≤‡ßã ---

# /start ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """/start ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¶‡¶ø‡¶≤‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§ ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ ‡¶™‡¶æ‡¶†‡¶æ‡ßü‡•§"""
    welcome_message = (
        "Welcome to the Digital Store! ü§ñ\n\n"
        "You can buy awesome digital products here.\n\n"
        "Available commands:\n"
        "/products - See the list of available items"
    )
    await update.message.reply_text(welcome_message)

# /products ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø (‡¶°‡ßá‡¶ü‡¶æ‡¶¨‡ßá‡¶∏ ‡¶∏‡¶π)
async def products(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """‡¶°‡ßá‡¶ü‡¶æ‡¶¨‡ßá‡¶∏ ‡¶•‡ßá‡¶ï‡ßá ‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡ßç‡¶ü‡ßá‡¶∞ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ ‡¶è‡¶®‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡ßü‡•§"""
    conn = None
    product_list_message = "Sorry, couldn't fetch products right now. Please try again later."

    try:
        # ‡¶°‡ßá‡¶ü‡¶æ‡¶¨‡ßá‡¶∏‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶∏‡¶Ç‡¶Ø‡ßã‡¶ó ‡¶∏‡ßç‡¶•‡¶æ‡¶™‡¶®
        conn = psycopg2.connect(DATABASE_URL)
        cur = conn.cursor()

        # ‡¶°‡ßá‡¶ü‡¶æ‡¶¨‡ßá‡¶∏ ‡¶•‡ßá‡¶ï‡ßá ‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡ßç‡¶ü‡ßá‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶Ü‡¶®‡¶æ
        cur.execute("SELECT name, price FROM products WHERE is_available = TRUE ORDER BY price;")
        all_products = cur.fetchall()

        # ‡¶´‡¶≤‡¶æ‡¶´‡¶≤‡¶ü‡¶ø‡¶ï‡ßá ‡¶∏‡ßÅ‡¶®‡ßç‡¶¶‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶∏‡¶æ‡¶ú‡¶æ‡¶®‡ßã
        if all_products:
            product_list_message = "‚ú® Available Products ‚ú®\n\n"
            for product in all_products:
                product_name = product[0]
                product_price = product[1]
                # '.2f' ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶Æ‡ßÇ‡¶≤‡ßç‡¶Ø‡¶ï‡ßá ‡¶¶‡ßÅ‡¶ü‡¶ø ‡¶¶‡¶∂‡¶Æ‡¶ø‡¶ï ‡¶∏‡ßç‡¶•‡¶æ‡¶® ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶π‡¶ö‡ßç‡¶õ‡ßá
                product_list_message += f"üîπ {product_name} - ${product_price:.2f}\n"
        else:
            product_list_message = "No products available at the moment. üôÅ"

        cur.close()

    except Exception as e:
        print(f"Database Error: {e}")

    finally:
        # ‡¶∏‡¶Ç‡¶Ø‡ßã‡¶ó‡¶ü‡¶ø ‡¶Ö‡¶¨‡¶∂‡ßç‡¶Ø‡¶á ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ
        if conn is not None:
            conn.close()

    await update.message.reply_text(product_list_message)

# --- Vercel-‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Æ‡ßÇ‡¶≤ ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ ---
async def main(update_data):
    """Vercel ‡¶•‡ßá‡¶ï‡ßá ‡¶Ü‡¶∏‡¶æ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶Ö‡¶®‡ßÅ‡¶∞‡ßã‡¶ß ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤ ‡¶ï‡¶∞‡ßá‡•§"""
    application = Application.builder().token(BOT_TOKEN).build()

    # ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("products", products))

    # ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶•‡ßá‡¶ï‡ßá ‡¶Ü‡¶∏‡¶æ ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡ßÅ‡¶®
    async with application:
        update = Update.de_json(data=update_data, bot=application.bot)
        await application.process_update(update)

def handler(event, context):
    """Vercel-‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Æ‡ßÇ‡¶≤ ‡¶è‡¶®‡ßç‡¶ü‡ßç‡¶∞‡¶ø ‡¶™‡ßü‡ßá‡¶®‡ßç‡¶ü‡•§"""
    try:
        update_data = json.loads(event['body'])
        asyncio.run(main(update_data))
        return {'statusCode': 200, 'body': 'Success'}
    except Exception as e:
        print(f"Error in handler: {e}")
        return {'statusCode': 500, 'body': 'Error'}